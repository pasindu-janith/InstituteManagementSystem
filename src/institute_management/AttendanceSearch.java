/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package institute_management;

import com.institute.common.DateAndTime;
import com.institute.db.DB;
import java.awt.Color;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pasindu hathurushigh
 */
public class AttendanceSearch extends javax.swing.JFrame {

    private DefaultTableModel dtm;
    private Design design;
    /**
     * Creates new form AttendanceSearch
     */
    public AttendanceSearch() {
        initComponents();
        txt_studentid.grabFocus();
        txt_studentid.setEditable(false);
        dtm = (DefaultTableModel) jTable1.getModel();
        design = new Design();
        design.tableDesign(jTable1);
        this.setIconImage(design.getIconImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txt_studentid = new javax.swing.JTextField();
        txt_studentname = new javax.swing.JTextField();
        combo_class = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_studentcount = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txt_average = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search Attendance");

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("     SEARCH ATTENDANCE");
        jLabel1.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("Student ID");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Student Name");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText("Class");

        txt_studentid.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        txt_studentid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_studentidActionPerformed(evt);
            }
        });

        txt_studentname.setEditable(false);
        txt_studentname.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N

        combo_class.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        combo_class.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_classActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(22);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel5.setText("Attendance");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jRadioButton1.setText("Attendance of a student");
        jRadioButton1.setContentAreaFilled(false);
        jRadioButton1.setFocusPainted(false);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        jRadioButton2.setText("Attendance of a class");
        jRadioButton2.setContentAreaFilled(false);
        jRadioButton2.setFocusPainted(false);
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N
        jLabel6.setText("Search Filter");

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel7.setText("Registered Students");

        txt_studentcount.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel8.setText("Average Attendance");

        txt_average.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_studentcount)
                            .addComponent(txt_average)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(59, 59, 59)
                        .addComponent(jRadioButton1)
                        .addGap(73, 73, 73)
                        .addComponent(jRadioButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_studentid)
                            .addComponent(txt_studentname)
                            .addComponent(combo_class, 0, 515, Short.MAX_VALUE))
                        .addGap(36, 36, 36)))
                .addGap(49, 49, 49))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jLabel6))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_studentid, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_studentname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(combo_class, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_studentcount, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_average, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE))
                .addGap(32, 32, 32))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txt_studentidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_studentidActionPerformed
        if (!txt_studentid.getText().equals("")) {
            try {
                ResultSet rs = DB.search("SELECT `fname`,`lname` FROM student WHERE `studentid`='"
                        + txt_studentid.getText() + "'");
                if (rs.next()) {
                    txt_studentname.setForeground(Color.BLACK);
                    txt_studentname.setText(rs.getString("fname") + " " + rs.getString("lname"));
                    rs = DB.search("SELECT `classcode` FROM student_class WHERE `studentid`='" 
                            + txt_studentid.getText() + "' AND `status`='1'");
                    Vector v = new Vector();
                    while (rs.next()) {
                        ResultSet rs_class = DB.search("SELECT * FROM class c "
                                + "INNER JOIN teacher t ON c.`teacher`=t.`nic` "
                                + "INNER JOIN classtype ct ON c.`classtype`=ct.`id` "
                                + "INNER JOIN subject s ON c.`subject`=s.`id` WHERE c.`classcode`='"
                                + rs.getString("classcode") + "'");
                        if (rs_class.next()) {
                            String cls = rs.getString("classcode") + "-" + "GRADE "
                                    + rs_class.getString("c.grade") + " " + rs_class.getString("s.name") + " "
                                    + rs_class.getString("ct.type") + "--"
                                    + rs_class.getString("t.title") + " " + rs_class.getString("t.fname") + " " + rs_class.getString("t.lname");
                            v.add(cls);
                        }
                    }
                    combo_class.setModel(new DefaultComboBoxModel<>(v));
                    if (!v.isEmpty()) {
                        combo_class.setSelectedIndex(0);
                    }
                } else {
                    txt_studentname.setForeground(Color.RED);
                    txt_studentname.setText("No registered student from this ID");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txt_studentidActionPerformed

    private void combo_classActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_classActionPerformed
        try {
            txt_studentcount.setText(null);
            txt_average.setText(null);
            ResultSet rs = DB.search("SELECT `id`,`date` FROM attendance WHERE `date` LIKE '"
                    + DateAndTime.getYearMonth() + "%' AND `classcode`='"
                    + combo_class.getSelectedItem().toString().split("-")[0] + "'");
            dtm.setRowCount(0);
            int countAttendTotal = 0;
            int countStudentPresent = 0;
            int countClassDate = 0;
            while (rs.next()) {
                Vector v = new Vector();
                String attendanceStat = "";
                if (jRadioButton1.isSelected()) {
                    ResultSet rs_stat = DB.search("SELECT * FROM attendance_mark WHERE `attendanceid`='"
                            + rs.getString("id") + "' AND `studentid`='" + txt_studentid.getText() + "'");
                    if (rs_stat.next()) {
                        attendanceStat = "PRESENT";
                        countStudentPresent++;

                    } else {
                        attendanceStat = "ABSENT";
                    }
                    v.add(rs.getString("date"));
                    v.add(attendanceStat);
                    dtm.addRow(v);
                } else if (jRadioButton2.isSelected()) {
                    ResultSet rs_stat = DB.search("SELECT * FROM attendance_mark WHERE `attendanceid`='"
                            + rs.getString("id") + "'");
                    while (rs_stat.next()) {
                        Vector v_mark = new Vector();
                        v_mark.add(rs.getString("date"));
                        v_mark.add(rs_stat.getString("studentid"));
                        dtm.addRow(v_mark);
                        countAttendTotal++;
                    }
                }
                countClassDate++;
            }
            // setting active student count and average of attendance
            if (jRadioButton2.isSelected()) {
                rs = DB.search("SELECT COUNT(*) AS studcount FROM student_class WHERE `classcode`='"
                        + combo_class.getSelectedItem().toString().split("-")[0] + "' AND `status`='1'");
                if (rs.next() && rs.getInt("studcount") != 0 && countClassDate != 0) {
                    txt_studentcount.setText("" + rs.getInt("studcount"));
                    double average = (countAttendTotal / (countClassDate * Integer.parseInt(txt_studentcount.getText()))) * 100;
                    txt_average.setText("" + average);
                }
            } else if (jRadioButton1.isSelected()) {
                if (countClassDate != 0) {
                    double avearge = (countStudentPresent * 100) / countClassDate;
                    txt_average.setText("" + avearge);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_combo_classActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        loadClass();
        txt_studentid.setText(null);
        txt_studentname.setText(null);
        txt_studentid.setEditable(false);
        txt_studentname.setEditable(false);
        dtm.setRowCount(0);
        String columnData[] = {"Class Date", "Student ID"};
        dtm.setColumnIdentifiers(columnData);
        txt_studentcount.setText(null);
        txt_average.setText(null);
        txt_studentcount.setEnabled(true);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        Vector v = new Vector();
        txt_studentid.setEditable(true);
        txt_studentid.grabFocus();
        dtm.setRowCount(0);
        String columnData[] = {"Class Date", "Status"};
        dtm.setColumnIdentifiers(columnData);
        combo_class.setModel(new DefaultComboBoxModel<>(v));
        txt_studentcount.setText(null);
        txt_average.setText(null);
        txt_studentcount.setEnabled(false);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AttendanceSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AttendanceSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AttendanceSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AttendanceSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AttendanceSearch().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> combo_class;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txt_average;
    private javax.swing.JTextField txt_studentcount;
    private javax.swing.JTextField txt_studentid;
    private javax.swing.JTextField txt_studentname;
    // End of variables declaration//GEN-END:variables
private void loadClass() {
        try {
            ResultSet rs = DB.search("SELECT * FROM class c "
                    + "INNER JOIN teacher t ON t.`nic`=c.`teacher` "
                    + "INNER JOIN classtype ct ON ct.`id`=c.`classtype` "
                    + "INNER JOIN subject s ON s.`id`=c.`subject` "
                    + "WHERE c.status='1' ORDER BY c.`grade`,s.`name` ASC");
            Vector v = new Vector();
            while (rs.next()) {
                String cls = rs.getString("classcode") + "-" + "GRADE "
                        + rs.getString("c.grade") + " " + rs.getString("s.name") + " "
                        + rs.getString("ct.type") + "--"
                        + rs.getString("t.title") + " " + rs.getString("t.fname") + " " + rs.getString("t.lname");
                v.add(cls);
            }
            combo_class.setModel(new DefaultComboBoxModel<>(v));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
