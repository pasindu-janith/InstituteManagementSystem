/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package institute_management;

import com.institute.common.DateAndTime;
import com.institute.common.FormatName;
import com.institute.common.SystemConfigData;
import com.institute.db.DB;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author pasindu hathurushigh
 */
public class Payment extends javax.swing.JFrame {

    private DefaultTableModel dtm;
    private Design design;

    /**
     * Creates new form Payment
     */
    public Payment() {
        initComponents();
        generateInvoiceId();
        loadPaymentType();
        dtm = (DefaultTableModel) jTable1.getModel();
        design = new Design();
        design.tableDesign(jTable1);
        setIconImage(design.getIconImage());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txt_invoiceid = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_studentid = new javax.swing.JTextField();
        txt_studentname = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel13 = new javax.swing.JLabel();
        txt_paymentstat = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txt_netfee = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txt_fee = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        combo_paytype = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        combo_class = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        txt_total = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txt_payment = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txt_balance = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Payment");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeOperation(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("     PAYMENTS");
        jLabel1.setOpaque(true);

        txt_invoiceid.setEditable(false);
        txt_invoiceid.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        jLabel9.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel9.setText("Invoice ID");

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("Student ID");

        txt_studentid.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txt_studentid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_studentidActionPerformed(evt);
            }
        });
        txt_studentid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_studentidKeyTyped(evt);
            }
        });

        txt_studentname.setEditable(false);
        txt_studentname.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        jList1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jList1KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jList1);

        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel13.setText("Attendance");

        txt_paymentstat.setEditable(false);
        txt_paymentstat.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel12.setText("Payment Status");

        txt_netfee.setEditable(false);
        txt_netfee.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txt_netfee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_netfeeActionPerformed(evt);
            }
        });
        txt_netfee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_netfeeKeyReleased(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel11.setText("Sub Fee");

        txt_fee.setEditable(false);
        txt_fee.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        txt_fee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_feeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel5.setText("Fee");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText("Payment Type");

        combo_paytype.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        combo_paytype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_paytype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_paytypeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Class");

        combo_class.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        combo_class.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_classActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Class Code", "Class", "Teacher", "Payment Month", "Fee", "Payment Type", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(25);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(170);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(40);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(60);
        }

        txt_total.setEditable(false);
        txt_total.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel10.setText("Total");

        txt_payment.setEditable(false);
        txt_payment.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txt_payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_paymentActionPerformed(evt);
            }
        });
        txt_payment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_paymentKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel6.setText("Payment");

        txt_balance.setEditable(false);
        txt_balance.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txt_balance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_balanceActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel7.setText("Balance");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel8.setText("Name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_invoiceid, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_studentid, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_studentname))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(20, 20, 20)
                                .addComponent(combo_paytype, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(245, 245, 245)
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_paymentstat))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_fee, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(330, 330, 330)
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_netfee, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(combo_class, javax.swing.GroupLayout.PREFERRED_SIZE, 670, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(207, 207, 207)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60))
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txt_invoiceid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel8)
                            .addComponent(txt_studentid, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_studentname, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(combo_class, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(combo_paytype, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txt_paymentstat, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel12)))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txt_fee, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_netfee, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel10)
                    .addComponent(txt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_balance, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void combo_classActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_classActionPerformed
        try {
            ResultSet rs = DB.search("SELECT `fee` FROM class WHERE `classcode`='"
                    + combo_class.getSelectedItem().toString().split("-")[0] + "'");
            if (rs.next()) {
                double fee = rs.getDouble("fee");
                double rate = Double.parseDouble(combo_paytype.getSelectedItem().toString().split("/")[1]);
                double finalFee = fee * rate;
                txt_fee.setText("" + fee);
                txt_netfee.setText("" + finalFee);
                txt_netfee.grabFocus();
            }
            Vector v = new Vector();
            String month = DateAndTime.getYearMonth().split("-")[1];
            if (month.substring(0, 1).equals("0")) {
                month = month.substring(1, 2);
            }
            int previousMonth = Integer.parseInt(month) - 1;
            String preMonth = String.valueOf(previousMonth);
            if (String.valueOf(previousMonth).length() == 1) {
                preMonth = "0" + preMonth;
            }
            if (preMonth.equals("00")) {
                int previousYear = Integer.parseInt(DateAndTime.getYearMonth().split("-")[0]) - 1;
                preMonth = previousYear + "-12";
            } else {
                preMonth = DateAndTime.getYearMonth().split("-")[0] + "-" + preMonth;
            }
            rs = DB.search("SELECT * FROM invoice_class ic "
                    + "LEFT JOIN invoice i ON ic.`invoiceid`=i.`invoiceid` WHERE i.`studentid`='"
                    + txt_studentid.getText() + "' AND ic.`classcode`='"
                    + combo_class.getSelectedItem().toString().split("-")[0] + "' AND ic.`paymentmonth`='"
                    + preMonth + "'");
            if (rs.next()) {
                jList1.setBorder(new BevelBorder(1));
            } else {
                ResultSet rs_attend = DB.search("SELECT id,date FROM attendance WHERE date like '"
                        + preMonth + "%' AND classcode='"
                        + combo_class.getSelectedItem().toString().split("-")[0] + "'");
                while (rs_attend.next()) {
                    String attendanceStat = "";
                    ResultSet rs_stat = DB.search("SELECT * FROM attendance_mark WHERE `attendanceid`='"
                            + rs_attend.getString("id") + "' AND `studentid`='" + txt_studentid.getText() + "'");
                    if (rs_stat.next()) {
                        attendanceStat = "PRESENT";
                    } else {
                        attendanceStat = "ABSENT";
                    }
                    String attendanceDetail = rs_attend.getString("date") + " -----> " + attendanceStat;
                    v.add(attendanceDetail);
                }
                v.add("NOT PAID TO, " + preMonth);
                jList1.setBorder(new LineBorder(Color.RED));
            }
            rs = DB.search("SELECT `id`,`date` FROM attendance WHERE date like '"
                    + DateAndTime.getYearMonth() + "%' AND classcode='"
                    + combo_class.getSelectedItem().toString().split("-")[0] + "'");

            while (rs.next()) {
                String attendanceStat = "";
                ResultSet rs_stat = DB.search("SELECT * FROM attendance_mark WHERE `attendanceid`='"
                        + rs.getString("id") + "' AND `studentid`='" + txt_studentid.getText() + "'");
                if (rs_stat.next()) {
                    attendanceStat = "PRESENT";
                } else {
                    attendanceStat = "ABSENT";
                }
                String attendanceDetail = rs.getString("date") + " -----> " + attendanceStat;
                v.add(attendanceDetail);
            }
            jList1.setListData(v);
            rs = DB.search("SELECT * FROM invoice_class ic "
                    + "INNER JOIN invoice i ON ic.`invoiceid`=i.`invoiceid` WHERE i.`studentid`='"
                    + txt_studentid.getText() + "' AND `classcode`='"
                    + combo_class.getSelectedItem().toString().split("-")[0] + "' AND `paymentmonth`='"
                    + DateAndTime.getYearMonth() + "'");
            if (rs.next()) {
                txt_paymentstat.setForeground(new Color(0, 100, 0));
                txt_paymentstat.setText("ALREADY PAID");
                txt_paymentstat.grabFocus();
            } else {
                txt_paymentstat.setForeground(Color.RED);
                txt_paymentstat.setText("NOT PAID");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_combo_classActionPerformed

    private void combo_paytypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_paytypeActionPerformed
        if (!txt_fee.getText().equals("")) {
            double fee = Double.parseDouble(txt_fee.getText());
            double rate = Double.parseDouble(combo_paytype.getSelectedItem().toString().split("/")[1]);
            double finalFee = fee * rate;
            txt_netfee.setText("" + finalFee);
            if (txt_paymentstat.getText().equals("ALREADY PAID")) {
                txt_paymentstat.grabFocus();
            } else if (txt_paymentstat.getText().equals("NOT PAID")) {
                txt_netfee.grabFocus();
            }

        }
    }//GEN-LAST:event_combo_paytypeActionPerformed

    private void txt_feeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_feeActionPerformed

    }//GEN-LAST:event_txt_feeActionPerformed

    private void txt_studentidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_studentidActionPerformed
        if (!txt_studentid.getText().equals("")) {
            try {
                ResultSet rs = DB.search("SELECT `fname`,`lname` FROM student WHERE `studentid`='"
                        + txt_studentid.getText() + "'");
                if (rs.next()) {
                    txt_studentname.setForeground(Color.BLACK);
                    txt_studentname.setText(rs.getString("fname") + " " + rs.getString("lname"));
                    rs = DB.search("SELECT `classcode` FROM student_class WHERE `studentid`='"
                            + txt_studentid.getText() + "' AND status='1'");
                    Vector v = new Vector();
                    txt_paymentstat.setText(null);
                    while (rs.next()) {
                        ResultSet rs_class = DB.search("SELECT * FROM class c "
                                + "INNER JOIN teacher t ON c.`teacher`=t.`nic` "
                                + "INNER JOIN classtype ct ON c.`classtype`=ct.`id` "
                                + "INNER JOIN subject s ON c.`subject`=s.id WHERE c.`classcode`='"
                                + rs.getString("classcode") + "'");
                        if (rs_class.next()) {
                            String cls = rs.getString("classcode") + "-" + "GRADE "
                                    + rs_class.getString("c.grade") + " " + rs_class.getString("s.name") + " "
                                    + rs_class.getString("ct.type") + "--"
                                    + rs_class.getString("t.title") + " " + rs_class.getString("t.fname") + " " + rs_class.getString("t.lname");
                            v.add(cls);
                        }
                    }
                    combo_class.setModel(new DefaultComboBoxModel<>(v));
                    if (!v.isEmpty()) {
                        combo_class.setSelectedIndex(0);
                    }
                    dtm.setRowCount(0);
                    txt_total.setText("");
                    txt_payment.setText("");
                    txt_balance.setText("");
                } else {
                    Vector v = new Vector();
                    combo_class.setModel(new DefaultComboBoxModel<>(v));
                    txt_studentname.setForeground(Color.RED);
                    txt_studentname.setText("NO REGISTERED STUDENT FROM THIS ID");
                    txt_paymentstat.setText(null);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txt_studentidActionPerformed

    private void txt_netfeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_netfeeActionPerformed
        if (combo_class.getSelectedItem() != null) {
            Vector v = new Vector();
            v.add(combo_class.getSelectedItem().toString().split("-")[0]);
            v.add(FormatName.getFormatName(combo_class.getSelectedItem().toString().split("-")[1].split("--")[0]));
            v.add(FormatName.getFormatName(combo_class.getSelectedItem().toString().split("--")[1]));
            v.add(DateAndTime.getYearMonth());
            v.add(txt_fee.getText());
            v.add(combo_paytype.getSelectedItem().toString().split("/")[0]);
            v.add(txt_netfee.getText());
            checkRowRepeating();
            dtm.addRow(v);
            calculateTotal();
        }
    }//GEN-LAST:event_txt_netfeeActionPerformed

    private void txt_netfeeKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_netfeeKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DOWN && dtm.getRowCount() != 0) {
            txt_payment.setEditable(true);
            txt_payment.grabFocus();
        }
    }//GEN-LAST:event_txt_netfeeKeyReleased

    private void txt_paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_paymentActionPerformed
        if (!txt_payment.getText().equals("") && !txt_total.getText().equals("")) {
            double payment = Double.parseDouble(txt_payment.getText());
            double total = Double.parseDouble(txt_total.getText());
            txt_payment.setText("" + payment);
            if (payment >= total) {
                txt_balance.setText("" + (payment - total));
                txt_balance.grabFocus();

            } else {
                JOptionPane.showMessageDialog(this, "Payment not enough", "Payment Error",
                        JOptionPane.WARNING_MESSAGE, design.getWarningIcon());
                txt_payment.grabFocus();
            }
        }
    }//GEN-LAST:event_txt_paymentActionPerformed

    private void txt_balanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_balanceActionPerformed
        if (!txt_balance.getText().equals("")) {
            try {
                DB.push("INSERT INTO invoice VALUES('"
                        + txt_invoiceid.getText() + "','"
                        + txt_studentid.getText() + "','"
                        + DateAndTime.getDateTime() + "','"
                        + txt_total.getText() + "','"
                        + txt_payment.getText() + "','"
                        + SystemConfigData.getUserid() + "')");
                for (int row = 0; row < jTable1.getRowCount(); row++) {
                    double discount = Double.parseDouble(jTable1.getValueAt(row, 4).toString())
                            - Double.parseDouble(jTable1.getValueAt(row, 6).toString());
                    DB.push("INSERT INTO invoice_class"
                            + "(`invoiceid`,`classcode`,`paymentmonth`,`fee`,`paymenttype`,`discount`,`subtotal`) VALUES('"
                            + txt_invoiceid.getText() + "','"
                            + jTable1.getValueAt(row, 0).toString() + "','"
                            + jTable1.getValueAt(row, 3).toString() + "','"
                            + jTable1.getValueAt(row, 4).toString() + "','"
                            + jTable1.getValueAt(row, 5).toString().split("-")[0] + "','"
                            + discount + "','"
                            + jTable1.getValueAt(row, 6).toString() + "')");
                }
                generateInvoiceReport();
                clearInvoice();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_txt_balanceActionPerformed

    private void closeOperation(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeOperation
        this.dispose();
        Home.payment = null;
    }//GEN-LAST:event_closeOperation

    private void txt_paymentKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_paymentKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            if (evt.getKeyChar() != '.') {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txt_paymentKeyTyped

    private void txt_studentidKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_studentidKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }
    }//GEN-LAST:event_txt_studentidKeyTyped

    private void jList1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jList1KeyReleased
        if (!jList1.isSelectionEmpty() && evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (jList1.getSelectedValue().split(", ")[0].equals("NOT PAID TO")) {
                checkRowRepeatingPreviousPay(jList1.getSelectedValue().split(", ")[1]);
                txt_netfee.postActionEvent();
                dtm.setValueAt(jList1.getSelectedValue().split(", ")[1], jTable1.getRowCount() - 1, 3);
            }
        }
    }//GEN-LAST:event_jList1KeyReleased

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            dtm.removeRow(jTable1.getSelectedRow());
        }
    }//GEN-LAST:event_jTable1KeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Payment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo_class;
    private javax.swing.JComboBox<String> combo_paytype;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txt_balance;
    private javax.swing.JTextField txt_fee;
    private javax.swing.JTextField txt_invoiceid;
    private javax.swing.JTextField txt_netfee;
    private javax.swing.JTextField txt_payment;
    private javax.swing.JTextField txt_paymentstat;
    private javax.swing.JTextField txt_studentid;
    private javax.swing.JTextField txt_studentname;
    private javax.swing.JTextField txt_total;
    // End of variables declaration//GEN-END:variables

    private void generateInvoiceId() {
        try {
            ResultSet rs = DB.search("SELECT COUNT(*) AS idcount FROM invoice");
            if (rs.next()) {
                int count = rs.getInt("idcount");
                txt_invoiceid.setText("" + (++count));
                txt_studentid.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadPaymentType() {
        try {
            ResultSet rs = DB.search("SELECT * FROM paymenttype WHERE `type` != 'ADMISSION'");
            Vector v = new Vector();
            while (rs.next()) {
                v.add(rs.getString("id") + "-" + rs.getString("type") + "/" + rs.getDouble("rate"));
            }
            combo_paytype.setModel(new DefaultComboBoxModel(v));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void calculateTotal() {
        double total = 0.0;
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            double subtotal = Double.parseDouble(jTable1.getValueAt(row, 6).toString());
            total += subtotal;
        }
        txt_total.setText("" + total);
    }

    private void generateInvoiceReport() {
        try {
            InputStream stream = new FileInputStream("src/com/institute/report/InstituteInvoice.jasper");
            Map<String, Object> params = new HashMap<>();
            params.put("param_invoiceid", txt_invoiceid.getText());
            params.put("param_studentid", txt_studentid.getText());
            params.put("param_studentname", FormatName.getFormatName(txt_studentname.getText()));
            params.put("param_total", txt_total.getText());
            params.put("param_payment", txt_payment.getText());
            params.put("param_balance", txt_balance.getText());
            params.put("param_employee", SystemConfigData.getUserid());
            JRTableModelDataSource dataSource = new JRTableModelDataSource(jTable1.getModel());
            JasperPrint fillReport = JasperFillManager.fillReport(stream, params, dataSource);
            JasperViewer.viewReport(fillReport, false);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void checkRowRepeating() {
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            if (jTable1.getValueAt(row, 0).equals(combo_class.getSelectedItem().toString().split("-")[0])
                    && jTable1.getValueAt(row, 3).equals(DateAndTime.getYearMonth())) {
                dtm.removeRow(row);
                break;
            }
        }
    }

    private void clearInvoice() {
        dtm.setRowCount(0);
        generateInvoiceId();
        txt_studentid.setText(null);
        txt_studentname.setText(null);
        txt_paymentstat.setText(null);
        txt_fee.setText(null);
        txt_netfee.setText(null);
        txt_payment.setText(null);
        txt_payment.setEditable(false);
        txt_total.setText("0.0");
        txt_balance.setText(null);
        combo_class.setModel(new DefaultComboBoxModel<>());
        jList1.setListData(new Vector());
        jList1.setBorder(new BevelBorder(1));
    }

    private void checkRowRepeatingPreviousPay(String month) {
        for (int row = 0; row < jTable1.getRowCount(); row++) {
            if (jTable1.getValueAt(row, 0).equals(combo_class.getSelectedItem().toString().split("-")[0])
                    && jTable1.getValueAt(row, 3).equals(month)) {
                dtm.removeRow(row);
                break;
            }
        }
    }
}
