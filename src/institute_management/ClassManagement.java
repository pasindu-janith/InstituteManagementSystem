/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package institute_management;

import com.institute.db.DB;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author pasindu hathurushigh
 */
public class ClassManagement extends javax.swing.JFrame {

    StudentClassRegistration studClsReg;
    private SimpleDateFormat sdf;
    private Design design;

    /**
     * Creates new form ClassManagement
     */
    public ClassManagement() {
        initComponents();
        loadSubject();
        loadTeachers();
        loadHall();
        loadClassType();
        generateClassCode();
        this.setIconImage(design.getIconImage());
    }

    {
        design = new Design();
        sdf = new SimpleDateFormat("HH:mm:ss");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        starttime = new lu.tudor.santec.jtimechooser.JTimeChooser();
        endtime = new lu.tudor.santec.jtimechooser.JTimeChooser();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        combo_classday = new javax.swing.JComboBox<>();
        combo_hall = new javax.swing.JComboBox<>();
        txt_fee = new javax.swing.JTextField();
        txt_regstudents = new javax.swing.JTextField();
        rad_active = new javax.swing.JRadioButton();
        rad_inactive = new javax.swing.JRadioButton();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txt_classcode = new javax.swing.JTextField();
        combo_subject = new javax.swing.JComboBox<>();
        combo_teacher = new javax.swing.JComboBox<>();
        combo_grade = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        combo_classtype = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Class Management");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeOperation(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 102, 153));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("    CLASS MANAGEMENT");
        jLabel1.setOpaque(true);

        starttime.setShowIcon(true);
        starttime.setShowSeconds(false);

        endtime.setShowIcon(true);
        endtime.setShowSeconds(false);

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel6.setText("Hall");

        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel7.setText("Fee");

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel8.setText("Time");

        jLabel9.setText("From");

        jLabel10.setText("To");

        jLabel11.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel11.setText("Class Date");

        jButton1.setBackground(new java.awt.Color(0, 153, 0));
        jButton1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/institute/images/saveicon.png"))); // NOI18N
        jButton1.setText("Save");
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 102, 0));
        jButton2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/institute/images/updateicon.png"))); // NOI18N
        jButton2.setText("Update");
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setFocusPainted(false);
        jButton2.setOpaque(true);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 102, 204));
        jButton3.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/institute/images/searchicon.png"))); // NOI18N
        jButton3.setText("Search");
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setFocusPainted(false);
        jButton3.setOpaque(true);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(204, 0, 0));
        jButton4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/institute/images/deleteicon.png"))); // NOI18N
        jButton4.setText("Delete");
        jButton4.setContentAreaFilled(false);
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton4.setFocusPainted(false);
        jButton4.setOpaque(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(102, 0, 255));
        jButton5.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Register New Student");
        jButton5.setContentAreaFilled(false);
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton5.setFocusPainted(false);
        jButton5.setOpaque(true);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE))
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addGap(43, 43, 43)
                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel12.setText("Status");

        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel13.setText("Registered Students");

        combo_classday.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        combo_classday.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY" }));

        combo_hall.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        combo_hall.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txt_fee.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        txt_fee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_feeKeyTyped(evt);
            }
        });

        txt_regstudents.setEditable(false);
        txt_regstudents.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        txt_regstudents.setText("0");

        buttonGroup1.add(rad_active);
        rad_active.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        rad_active.setSelected(true);
        rad_active.setText("Active");
        rad_active.setFocusPainted(false);

        buttonGroup1.add(rad_inactive);
        rad_inactive.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        rad_inactive.setText("Inactive");
        rad_inactive.setFocusPainted(false);

        jButton6.setBackground(new java.awt.Color(0, 102, 153));
        jButton6.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Check Availability");
        jButton6.setContentAreaFilled(false);
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.setFocusPainted(false);
        jButton6.setOpaque(true);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Class Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 13))); // NOI18N

        txt_classcode.setEditable(false);
        txt_classcode.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N

        combo_subject.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        combo_subject.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        combo_subject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_subjectActionPerformed(evt);
            }
        });

        combo_teacher.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        combo_teacher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        combo_grade.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        combo_grade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "6", "7", "8", "9", "10", "11", "12", "13", "" }));

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel2.setText("Class Code");

        jLabel3.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel3.setText("Subject");

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel4.setText("Grade");

        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel5.setText("Teacher");

        jLabel14.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        jLabel14.setText("Class Type");

        combo_classtype.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_classcode)
                        .addGap(183, 183, 183))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combo_teacher, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(combo_subject, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(combo_grade, 0, 108, Short.MAX_VALUE)
                                .addGap(67, 67, 67)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(combo_classtype, 0, 147, Short.MAX_VALUE)))))
                .addGap(50, 50, 50))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_classcode, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combo_subject, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_teacher, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combo_grade, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel14)
                    .addComponent(combo_classtype, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(40, 40, 40)
                        .addComponent(rad_active)
                        .addGap(31, 31, 31)
                        .addComponent(rad_inactive)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txt_regstudents))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(combo_classday, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7))
                                        .addGap(40, 40, 40)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txt_fee)
                                                .addGap(79, 79, 79))
                                            .addComponent(combo_hall, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(18, 18, 18)
                                .addComponent(jButton6)
                                .addGap(95, 95, 95))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(33, 33, 33)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(starttime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(endtime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(39, 39, 39)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(combo_classday, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(endtime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(starttime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(combo_hall, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txt_fee, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txt_regstudents, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(rad_active)
                    .addComponent(rad_inactive))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        generateClassCode();
        if (!txt_fee.getText().equals("")) {
            if ((boolean) checkHallAvailability().get("availability")) {
                int status = (rad_active.isSelected()) ? 1 : 0;
                try {
                    ResultSet rs = DB.search("SELECT * FROM class WHERE `teacher`='"
                            + combo_teacher.getSelectedItem().toString().split("-")[0] + "' AND `grade`='"
                            + combo_grade.getSelectedItem().toString() + "' AND `subject`='"
                            + combo_subject.getSelectedItem().toString().split("-")[0] + "' AND `classtype`='"
                            + combo_classtype.getSelectedItem().toString().split("-")[0] + "'");
                    if (rs.next()) {
                        if (rs.getString("status").equals("0")) {
                            DB.push("UPDATE class SET `starttime`='" + starttime.getFormatedTime() + "',`endtime`='"
                                    + endtime.getFormatedTime() + "',`fee`='"
                                    + txt_fee.getText() + "',`hall`='"
                                    + combo_hall.getSelectedItem().toString().split("-")[0] + "',`status`='1' WHERE `classcode`='"
                                    + rs.getString("classcode") + "'");
                            JOptionPane.showMessageDialog(this, "Class Registered sucessfully!",
                                    "", JOptionPane.PLAIN_MESSAGE, design.getSuccessIcon());
                        } else {
                            JOptionPane.showMessageDialog(this, "This class already registered");
                        }
                    } else {
                        DB.push("INSERT INTO class VALUES('"
                                + txt_classcode.getText() + "','"
                                + combo_grade.getSelectedItem().toString() + "','"
                                + combo_subject.getSelectedItem().toString().split("-")[0] + "','"
                                + combo_teacher.getSelectedItem().toString().split("-")[0] + "','"
                                + combo_classtype.getSelectedItem().toString().split("-")[0] + "','"
                                + combo_classday.getSelectedItem().toString() + "','"
                                + starttime.getFormatedTime() + "','"
                                + endtime.getFormatedTime() + "','"
                                + combo_hall.getSelectedItem().toString().split("-")[0] + "','"
                                + txt_fee.getText() + "','"
                                + status + "')");
                        JOptionPane.showMessageDialog(this, "Class Registered successfully!",
                                "Success", JOptionPane.PLAIN_MESSAGE, design.getSuccessIcon());
                        clearFields();
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                JOptionPane.showMessageDialog(this, "This hall already has a class in progress at this time. classcode-"
                        + checkHallAvailability().get("classcode"), "", JOptionPane.ERROR_MESSAGE, design.getWarningIcon());
            }
        } else {
            JOptionPane.showMessageDialog(this, "Fill all mandatory Fields!", "",
                    JOptionPane.WARNING_MESSAGE, design.getWarningIcon());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (studClsReg == null) {
            studClsReg = new StudentClassRegistration(this);
            studClsReg.setVisible(true);
            this.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Please set a classcode by searching class");
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        generateClassCode();
        if ((boolean) checkHallAvailability().get("availability")
                || ((boolean) checkHallAvailability().get("availability") == false
                && checkHallAvailability().get("classcode").equals(txt_classcode.getText()))) {
            JOptionPane.showMessageDialog(this,
                    "This hall available at this time!");
        } else {
            JOptionPane.showMessageDialog(this,
                    "This hall already class in progress at this time. classcode-"
                    + checkHallAvailability().get("classcode"));
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        classSearch();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            if (!txt_fee.getText().equals("")) {
                ResultSet rs = DB.search("SELECT `classcode` FROM class WHERE `grade`='"
                        + combo_grade.getSelectedItem().toString() + "' AND `teacher`='"
                        + combo_teacher.getSelectedItem().toString().split("-")[0] + "' AND `classtype`='"
                        + combo_classtype.getSelectedItem().toString().split("-")[0] + "' AND `subject`='"
                        + combo_subject.getSelectedItem().toString().split("-")[0] + "'");
                if (rs.next()) {
                    if ((boolean) checkHallAvailability().get("availability")
                            || checkHallAvailability().get("classcode").equals(txt_classcode.getText())) {
                        byte status = (rad_active.isSelected()) ? (byte) 1 : (byte) 0;
                        DB.push("UPDATE class SET `fee`='"
                                + txt_fee.getText() + "',`starttime`='"
                                + starttime.getFormatedTime() + "',`endtime`='"
                                + endtime.getFormatedTime() + "',`classday`='"
                                + combo_classday.getSelectedItem().toString() + "',`hall`='"
                                + combo_hall.getSelectedItem().toString().split("-")[0] + "',`status`='"
                                + status + "' WHERE `classcode`='" + rs.getString("classcode") + "'");
                        JOptionPane.showMessageDialog(this, "Class updated successfully!",
                                "Success", JOptionPane.PLAIN_MESSAGE, design.getSuccessIcon());
                    } else {
                        JOptionPane.showMessageDialog(this, "Hall not available" + checkHallAvailability().get("classcode"));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No registered class from this details");
                }
            } else {
                JOptionPane.showMessageDialog(this, "Fill all mandatory Fields!", "",
                        JOptionPane.WARNING_MESSAGE, design.getWarningIcon());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void closeOperation(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeOperation
        this.dispose();
        Home.cmanage = null;
    }//GEN-LAST:event_closeOperation

    private void txt_feeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_feeKeyTyped
        if (!Character.isDigit(evt.getKeyChar())) {
            if (evt.getKeyChar() != '.') {
                evt.consume();
            }
        }
    }//GEN-LAST:event_txt_feeKeyTyped

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            ResultSet rs = DB.search("SELECT `classcode` FROM class WHERE `subject`='"
                    + combo_subject.getSelectedItem().toString().split("-")[0] + "' AND `teacher`='"
                    + combo_teacher.getSelectedItem().toString().split("-")[0] + "' AND `grade`='"
                    + combo_grade.getSelectedItem().toString() + "' AND `classtype`='"
                    + combo_classtype.getSelectedItem().toString().split("-")[0] + "' AND `status`='1'");
            if (rs.next()) {
                txt_classcode.setText(rs.getString("classcode"));
                int confirmOption = JOptionPane.showConfirmDialog(this, "Are you sure to delete this class?",
                        "Delete a class", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE,
                        design.getQuestionIcon());
                if (confirmOption == JOptionPane.YES_OPTION) {
                    DB.push("UPDATE class SET `status`='0' WHERE `classcode`='" + txt_classcode.getText() + "'");
                    clearFields();
                }
            } else {
                
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void combo_subjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_subjectActionPerformed
        loadTeachers();
    }//GEN-LAST:event_combo_subjectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> combo_classday;
    javax.swing.JComboBox<String> combo_classtype;
    javax.swing.JComboBox<String> combo_grade;
    private javax.swing.JComboBox<String> combo_hall;
    javax.swing.JComboBox<String> combo_subject;
    javax.swing.JComboBox<String> combo_teacher;
    private lu.tudor.santec.jtimechooser.JTimeChooser endtime;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton rad_active;
    private javax.swing.JRadioButton rad_inactive;
    private lu.tudor.santec.jtimechooser.JTimeChooser starttime;
    private javax.swing.JTextField txt_classcode;
    private javax.swing.JTextField txt_fee;
    private javax.swing.JTextField txt_regstudents;
    // End of variables declaration//GEN-END:variables

    private void loadTeachers() {
        try {
            String subject = combo_subject.getSelectedItem().toString().split("-")[0];
            Vector v = new Vector();
            ResultSet rs = DB.search("SELECT `nic`,`fname`,`lname` FROM teacher WHERE `nic` IN "
                    + "(SELECT `teacher` FROM teacher_subject WHERE `subject`='"
                    + subject + "') AND `status` = '1'");
            while (rs.next()) {
                String teacher = rs.getString("nic") + "-" + rs.getString("fname") + " " + rs.getString("lname");
                v.add(teacher);
            }
            combo_teacher.setModel(new DefaultComboBoxModel(v));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadSubject() {
        try {
            ResultSet rs = DB.search("SELECT * FROM subject");
            Vector v = new Vector();
            while (rs.next()) {
                String subject = rs.getString("id") + "-" + rs.getString("name");
                v.add(subject);
            }
            combo_subject.setModel(new DefaultComboBoxModel(v));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadHall() {
        try {
            ResultSet rs = DB.search("SELECT * FROM hall");
            Vector v = new Vector();
            while (rs.next()) {
                String hall = rs.getString("hallno") + "-" + rs.getString("hallname");
                v.add(hall);
            }
            combo_hall.setModel(new DefaultComboBoxModel(v));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void loadClassType() {
        try {
            ResultSet rs = DB.search("SELECT * FROM classtype");
            Vector v = new Vector();
            while (rs.next()) {
                String type = rs.getString("id") + "-" + rs.getString("type");
                v.add(type);
            }
            combo_classtype.setModel(new DefaultComboBoxModel(v));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void generateClassCode() {
        try {
            ResultSet rs = DB.search("SELECT MAX(classcode) as maxclasscode FROM class");
            if (rs.next()) {
                int classcode = rs.getInt("maxclasscode");
                txt_classcode.setText(String.valueOf(++classcode));
                txt_fee.grabFocus();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void classSearch() {
        try {
            if (combo_teacher.getSelectedItem() != null) {
                ResultSet rs = DB.search("SELECT * FROM class WHERE `subject`='"
                        + combo_subject.getSelectedItem().toString().split("-")[0] + "' AND `teacher`='"
                        + combo_teacher.getSelectedItem().toString().split("-")[0] + "' AND `grade`='"
                        + combo_grade.getSelectedItem().toString() + "' AND `classtype`='"
                        + combo_classtype.getSelectedItem().toString().split("-")[0] + "' AND `status`='1'");
                if (rs.next()) {
                    txt_classcode.setText(rs.getString("classcode"));
                    txt_fee.setText(String.valueOf(rs.getDouble("fee")));
                    starttime.setTime(sdf.parse(rs.getString("starttime")));
                    endtime.setTime(sdf.parse(rs.getString("endtime")));
                    combo_classday.setSelectedItem(rs.getString("classday"));
                    if (rs.getString("status").equals("1")) {
                        rad_active.setSelected(true);
                    } else {
                        rad_inactive.setSelected(true);
                    }
                    ResultSet rs_stud = DB.search("SELECT COUNT(*) AS studcount FROM student_class WHERE"
                            + " `classcode`='" + rs.getString("classcode") + "' AND `status`='1'");
                    if (rs_stud.next()) {
                        txt_regstudents.setText(rs_stud.getString("studcount"));
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No Registered class from this details!");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearFields() {
        txt_fee.setText(null);
        txt_regstudents.setText("0");
        generateClassCode();
        combo_classday.setSelectedIndex(0);
        combo_classtype.setSelectedIndex(0);
        combo_grade.setSelectedIndex(0);
        combo_hall.setSelectedIndex(0);
        combo_subject.setSelectedIndex(0);
        combo_teacher.setSelectedIndex(0);
    }

    private HashMap checkHallAvailability() {
        boolean status = false;
        HashMap map = new HashMap<String, Object>();
        try {
            String hallno = combo_hall.getSelectedItem().toString().split("-")[0];
            if (starttime.getHours() <= endtime.getHours()) {
                ResultSet rs = DB.search("SELECT `classcode` FROM class WHERE `hall`='" + hallno + "' AND ('"
                        + starttime.getFormatedTime() + "' BETWEEN `starttime` AND `endtime` OR '"
                        + endtime.getFormatedTime() + "' BETWEEN `starttime` AND `endtime`) AND `classday`='"
                        + combo_classday.getSelectedItem().toString() + "' AND `status`='1'");

                ResultSet rs_second = DB.search("SELECT `classcode` FROM class WHERE `status`='1' AND `hall`='"
                        + hallno + "' AND `starttime` BETWEEN '"
                        + starttime.getFormatedTime() + "' AND '" + endtime.getFormatedTime() + "' AND `classday`='"
                        + combo_classday.getSelectedItem().toString() + "'");

                if (rs.next()) {
                    map.put("classcode", rs.getString("classcode"));
                } else if (rs_second.next()) {
                    map.put("classcode", rs_second.getString("classcode"));
                } else {
                    status = true;
                }
                map.put("availability", status);
            } else {
                JOptionPane.showMessageDialog(this, "Enter valid time range!");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return map;

    }
}
